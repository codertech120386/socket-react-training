[{"/Users/dhavalchheda/Desktop/Study/react/routing-app/src/index.js":"1","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/App.js":"2","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/reportWebVitals.js":"3","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/Layout.js":"4","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/ChatHome.js":"5","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/Chat.js":"6","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/context/SocketContext.js":"7"},{"size":503,"mtime":1611666387342,"results":"8","hashOfConfig":"9"},{"size":705,"mtime":1611668106321,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611650689841,"results":"11","hashOfConfig":"9"},{"size":344,"mtime":1611651115534,"results":"12","hashOfConfig":"9"},{"size":2481,"mtime":1611718978766,"results":"13","hashOfConfig":"9"},{"size":2983,"mtime":1611682673393,"results":"14","hashOfConfig":"9"},{"size":111,"mtime":1611666780970,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"g1f17y",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/dhavalchheda/Desktop/Study/react/routing-app/src/index.js",[],["35","36"],"/Users/dhavalchheda/Desktop/Study/react/routing-app/src/App.js",[],"/Users/dhavalchheda/Desktop/Study/react/routing-app/src/reportWebVitals.js",[],"/Users/dhavalchheda/Desktop/Study/react/routing-app/src/Layout.js",[],["37","38"],"/Users/dhavalchheda/Desktop/Study/react/routing-app/src/ChatHome.js",["39","40","41","42"],"import React, {useState, useEffect, useContext} from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nimport Layout from './Layout';\n\nimport SocketContext from './context/SocketContext';\n\nexport default () => {\n    const [username, setUsername] = useState(\"\");\n    const [group, setGroup] = useState(\"Javascript\");\n    const [groupUsers, setGroupUsers ] = useState([]);\n    const socket = useContext(SocketContext);\n\n    let history = useHistory();\n    \n    const joinGroupSubmitHandler = (e) => {\n        e.preventDefault();\n        \n        socket.emit('joinGroup', { username, group });\n    \n        // Get message\n        socket.on('message', message => {\n            console.log(message);\n    \n        });\n\n        history.push({\n            pathname: \"/chat\",\n            state: {username, group, groupUsers}\n        })\n    }\n\n\n    const outputGroupName = (group) => {\n        console.log(\"group\", group)\n        // roomName.innerText = room;\n    }\n\n    const outputUsers = (users) => {\n        console.log(\"users\", users)\n        setGroupUsers(users)\n    }\n  \n    return (\n        <Layout>\n              <form onSubmit={joinGroupSubmitHandler}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"username\">Username</label>\n                    <input\n                        type=\"text\"\n                        value={username}\n                        id=\"username\"\n                        placeholder=\"Enter username...\"\n                        onChange={e => setUsername(e.target.value)}\n                        required\n                    />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"group\">Group</label>\n                    <select id=\"group\" value={group} onChange={e => setGroup(e.target.value)}>\n                        <option value=\"JavaScript\">JavaScript</option>\n                        <option value=\"React\">React</option>\n                        <option value=\"HTML\">HTML</option>\n                        <option value=\"CSS\">CSS</option>\n                        <option value=\"Node\">Node</option>\n                        <option value=\"Express\">Express</option>\n                        <option value=\"MySQL\">MySQL</option>\n                        <option value=\"Mongo\">Mongo</option>\n                    </select>\n                </div>\n                <button type=\"submit\" className=\"btn\">Join Group</button>\n            </form>\n        </Layout>\n    );\n}","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/Chat.js",["43","44"],"import React, {useEffect, useState, useContext} from 'react';\n\nimport SocketContext from './context/SocketContext';\n\n\nexport default (props) => {\n    const [groupUsers, setGroupUsers ] = useState([]);\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n\n    const username = props.location.state.username;\n    const group = props.location.state.group;\n\n    const socket = useContext(SocketContext);\n\n    useEffect(() => {\n        // Get room and users\n        socket.on('groupUsers', ({ group, users }) => {\n            outputUsers(users);\n        });\n\n        // Message from server\n        socket.on('message', message => {\n            outputMessage(message);\n        });\n    })\n\n    const outputUsers = (users) => {\n        setGroupUsers(users)\n    }\n\n    const outputMessage = (message) => {\n        let newMessages = messages\n        let finalMessages = newMessages.concat(message)\n        setMessages(finalMessages)\n    }\n\n    const chatMessageSubmitHandler = e => {\n        e.preventDefault();\n\n        // Emit message to server\n        socket.emit('chatMessage', message);\n    }\n\n    return (\n        <div className=\"chat-container\">\n            <header className=\"chat-header\">\n                <h1><i className=\"fas fa-smile\"></i> Masai School</h1>\n            </header>\n            <main className=\"chat-main\">\n                <div className=\"chat-sidebar\">\n                <h3><i className=\"fas fa-comments\"></i> Group Name:</h3>\n                <h2 id=\"room-name\">{group}</h2>\n                <h3><i className=\"fas fa-users\"></i> Users</h3>\n                <ul id=\"users\">\n                    {groupUsers.map(user => (\n                        <li>{user.username}</li>\n                    ))}\n                </ul>\n                </div>\n                <div className=\"chat-messages\">\n                    {messages.map(message => (\n                        <div>\n                            <div>\n                                {message.username} sent on {message.time}\n                            </div>\n                            <div>\n                                {message.text}\n                            </div>\n                            <br></br>\n                        </div>\n                    ))}\n                </div>\n            </main>\n            <div className=\"chat-form-container\">\n                <form id=\"chat-form\" onSubmit={chatMessageSubmitHandler}>\n                    <input\n                        id=\"msg\"\n                        type=\"text\"\n                        placeholder=\"Enter Message\"\n                        required\n                        value={message}\n                        onChange={e => setMessage(e.target.value)}\n                    />\n                    <button className=\"btn\">\n                        <i className=\"fas fa-paper-plane\"></i> \n                        Send\n                    </button>\n                </form>\n            </div>\n        </div>\n    )\n}","/Users/dhavalchheda/Desktop/Study/react/routing-app/src/context/SocketContext.js",["45"],"import React, {createContext} from 'react'\n\nconst SocketContext = createContext()\n\nexport default SocketContext",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":26,"nodeType":"54","messageId":"55","endLine":1,"endColumn":35},{"ruleId":"56","severity":1,"message":"57","line":8,"column":1,"nodeType":"58","endLine":75,"endColumn":2},{"ruleId":"52","severity":1,"message":"59","line":34,"column":11,"nodeType":"54","messageId":"55","endLine":34,"endColumn":26},{"ruleId":"52","severity":1,"message":"60","line":39,"column":11,"nodeType":"54","messageId":"55","endLine":39,"endColumn":22},{"ruleId":"56","severity":1,"message":"57","line":6,"column":1,"nodeType":"58","endLine":93,"endColumn":2},{"ruleId":"52","severity":1,"message":"61","line":11,"column":11,"nodeType":"54","messageId":"55","endLine":11,"endColumn":19},{"ruleId":"52","severity":1,"message":"62","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":13},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],["63"],["64"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'outputGroupName' is assigned a value but never used.","'outputUsers' is assigned a value but never used.","'username' is assigned a value but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]